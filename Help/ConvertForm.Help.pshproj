<?xml version="1.0"?>
<ModuleObject xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" fVersion="1.1" type="Script" mclass="External" useSupports="false">
  <Name>ConvertForm</Name>
  <Version>0.0</Version>
  <Description />
  <HasManifest>false</HasManifest>
  <OverridePostCount>false</OverridePostCount>
  <FetchPostCount xsi:nil="true" />
  <Cmdlets>
    <CmdletObject verb="Convert" noun="Form">
      <Name>Convert-Form</Name>
      <GeneralHelp>
        <Synopsis>Converti un fichier Winform (xxx.Designer.cs) en un script PowerShell.</Synopsis>
        <Description>Ce script permet de convertir un fichier CSharp contenant les déclarations d'une WinForm en un script PowerShell. 
La construction d'une fenêtre dans Visual Studio génère un fichier nommé NomDuFichier.Designer.cs.
C'est ce fichier qui constitue la source de ce script, on en extrait les lignes de déclaration des composants insérés sur la fenêtre de votre projet Winform. 
Si votre projet contient plusieurs Formulaires, vous devrez exécuter ce script pour chacun d'entre eux.

Si dans Visual Studio vous déclarez des événements spécifiques pour chaque composant, ce script construira une fonction pour chacun de ces événements. Le code C# contenu dans le corps de la méthode n'est pas converti.  

L'usage de certains composants graphique nécessite le modèle de thread STA, celui-ci peut être modifié à l'aide du paramètre -STA de Powershell.exe. Dans ce cas lors de l'exécution du script généré un contrôle du modèle de thread sera effectué.

La réussite de l'appel à Convert-Form générera au moins le fichier suivant :
 Form1.ps1 : script Powershell de déclaration du formulaire. Le nom reprend une partie nom de fichier CSharp 'xxx.Designer.cs'.

Cet appel peut également générer les fichiers suivants :
 Form1Properties.resources      : Fichier de ressources des propriétés du projet Winform
 Form1Properties.resources.log  : fichier de log associé créé par le programme Resgen.exe

 Form1.resources                : Fichier de ressources spécifique à un formulaire
 Form1.resources.log            : fichier de log associé créé par le programme Resgen.exe


</Description>
        <Notes>Site web du projet ConvertForm : https://convertform.codeplex.com/
</Notes>
        <InputType />
        <InputUrl />
        <InputTypeDescription />
        <ReturnType>System.IO.FileInfo</ReturnType>
        <ReturnUrl />
        <ReturnTypeDescription>Si le switch -Passthru est précisé, sinon ne renvoi aucune donnée. </ReturnTypeDescription>
      </GeneralHelp>
      <ParamSets>
        <CommandParameterSetInfo2 Name="Path" Params="Path Destination DestinationLiteral Encoding Force HideConsole asFunction Secondary Passthru Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable" />
        <CommandParameterSetInfo2 Name="LiteralPath" Params="LiteralPath Destination DestinationLiteral Encoding Force HideConsole asFunction Secondary Passthru Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable" />
      </ParamSets>
      <Syntax>
        <string>Convert-Form [-Path] &lt;String&gt; [[-Destination] &lt;PSObject&gt;] [[-DestinationLiteral] &lt;PSObject&gt;] [[-Encoding] &lt;String&gt; {unknown | string | unicode | bigendianunicode | utf8 | utf7 | utf32 | ascii | default | oem} ] [-Force] [-HideConsole] [-asFunction] [-Secondary] [-Passthru]</string>
        <string>Convert-Form [-LiteralPath] &lt;String&gt; [[-Destination] &lt;PSObject&gt;] [[-DestinationLiteral] &lt;PSObject&gt;] [[-Encoding] &lt;String&gt; {unknown | string | unicode | bigendianunicode | utf8 | utf7 | utf32 | ascii | default | oem} ] [-Force] [-HideConsole] [-asFunction] [-Secondary] [-Passthru]</string>
      </Syntax>
      <Parameters>
        <ParameterDescription type="String" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="true" pipeProp="false" isPos="true" pos="0" globbing="true">
          <Name>Path</Name>
          <Attributes>
            <string>System.Management.Automation.ArgumentTypeConverterAttribute</string>
            <string>System.Management.Automation.ParameterAttribute</string>
            <string>System.Management.Automation.ValidateNotNullOrEmptyAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Spécifie le chemin d’accès d'un fichier Designer.cs. Les caractères génériques sont autorisés.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="PSObject" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="true" isPos="true" pos="1" globbing="true">
          <Name>Destination</Name>
          <Attributes>
            <string>System.Management.Automation.ArgumentTypeConverterAttribute</string>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Spécifie le chemin d’accès du répertoire contenant le script généré. Les caractères génériques sont autorisés.
Si ce paramètre n'est pas précisé, le répertoire de destination sera celui contenant le fichier à convertir.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="PSObject" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="true" isPos="true" pos="1" globbing="false">
          <Name>DestinationLiteral</Name>
          <Attributes>
            <string>System.Management.Automation.ArgumentTypeConverterAttribute</string>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Spécifie le chemin d’accès du répertoire contenant le script généré. Contrairement à Destination, la valeur de DestinationLiteral est utilisée exactement telle que vous la tapez. Aucun caractère n’est interprété en tant que caractère générique. 
Si le chemin d’accès inclut des caractères d’échappement, mettez-le entre des guillemets simples. Les guillemets simples indiquent à Windows PowerShell qu’aucun caractère ne doit être interprété en tant que séquence d’échappement.

Si ce paramètre n'est pas précisé, le répertoire de destination sera celui contenant le fichier à convertir.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="String" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="true" pos="2" globbing="false">
          <Name>Encoding</Name>
          <Attributes>
            <string>System.Management.Automation.ArgumentTypeConverterAttribute</string>
            <string>System.Management.Automation.ValidateSetAttribute</string>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Consultez l'aide du provider FileSystem, section PARAMÈTRES DYNAMIQUES : Get-Help FileSystem</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>Force</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
            <string>System.Management.Automation.ArgumentTypeConverterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>La présence de ce paramètre évite une demande de confirmation si le fichier cible .ps1 existe déjà.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>HideConsole</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
            <string>System.Management.Automation.ArgumentTypeConverterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Masque la console lors de l'appel à la méthode ShowDialog() du formulaire principal.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>asFunction</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
            <string>System.Management.Automation.ArgumentTypeConverterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Le code du script généré est inséré dans une fonction.
Par défaut son nom est 'GeneratePrimaryForm', si le paramètre -Secondary est précisé, alors le nom de la fonction est 'GenerateSecondaryForm'.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="String" varLen="false" required="true" dynamic="false" pipeRemaining="false" pipe="true" pipeProp="false" isPos="true" pos="0" globbing="false">
          <Name>LiteralPath</Name>
          <Attributes>
            <string>System.Management.Automation.ArgumentTypeConverterAttribute</string>
            <string>System.Management.Automation.AliasAttribute</string>
            <string>System.Management.Automation.ParameterAttribute</string>
            <string>System.Management.Automation.ValidateNotNullOrEmptyAttribute</string>
          </Attributes>
          <Aliases>
            <string>PSPath</string>
          </Aliases>
          <Description>Spécifie le chemin d’accès d'un fichier Designer.cs. Contrairement à Path, la valeur de LiteralPath est utilisée exactement telle que vous la tapez. Aucun caractère n’est interprété en tant que caractère générique.

Si le chemin d’accès inclut des caractères d’échappement, mettez-le entre des guillemets simples.
Les guillemets simples indiquent à Windows PowerShell qu’aucun caractère ne doit être interprété en tant que séquence d’échappement.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>Secondary</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
            <string>System.Management.Automation.ArgumentTypeConverterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>La présence de ce paramètre génère un script d'un formulaire secondaire en évitant de dupliquer du code. 
C'est à dire qu'il utilisera une partie du code généré dans le formulaire principal.
Si le paramètre -AsFunction est précisé, alors le nom de la fonction sera 'GenerateSecondaryForm'.</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>Passthru</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
            <string>System.Management.Automation.ArgumentTypeConverterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Emet l'objet fichier correspondant au script .ps1 généré.</Description>
          <DefaultValue />
        </ParameterDescription>
      </Parameters>
      <Examples>
        <Example>
          <Name>Example 1</Name>
          <Cmd>$FormPath = "$Home\Mes documents\Visual Studio 2008\Projects\MyForms\MyForms\Form1.Designer.cs"
Convert-Form -Path $FormPath 
</Cmd>
          <Description>Converti le fichier Form1.Designer.cs en un script powershell "$Home\Mes documents\Visual Studio 2008\Projects\MyForms\MyForms\Form1.ps1".

Le script généré concerne un formulaire principal.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 2</Name>
          <Cmd>$FormPath = "$Home\Mes documents\Visual Studio 2008\Projects\MyForm\MyForm\Form1.Designer.cs"
md C:\Temp\MyForm
Convert-Form -Path $FormPath -Destination C:\Temp\MyForm -Force

</Cmd>
          <Description>Converti le fichier Form1.Designer.cs en un script powershell 'C:\Temp\MyForm\Form1.ps1'.
La présence du paramètre -Force écrase le fichier s'il existe déjà.

Le script généré concerne un formulaire principal.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 3</Name>
          <Cmd>$ScriptWinform=Convert-Form -LiteralPath "$ProjetPath\TestsWinform\Test21LiteralPath[AG]Naming\Frm[AG].Designer.cs" -DestinationLiteral C:\Temp\FormAG -Encoding unicode -passthru -Verbose</Cmd>
          <Description>Converti un fichier, dont le nom contient des jokers Powershell, en un script Powershell "C:\Temp\FormAG Frm[AG].ps1". L'usage des paramètres -LiteralPath et -DestinationLiteral sont ici nécessaires.

Le paramètre -Encoding encode en Unicode le fichier résultant. Par défaut chaque fichier est encodé en UTF8.

Le paramètre -Verbose détail les opérations.

Le paramètre -Passthru renvoie dans la variable $ScriptWinform l'objet fichier généré.

Le script généré concerne un formulaire principal.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 4</Name>
          <Cmd>$FormPath = "$Home\Mes documents\Visual Studio 2008\Projects\MyForms\MyForms\Form1.Designer.cs"
Convert-Form -Path $FormPath -Secondary</Cmd>
          <Description>Converti le fichier Form1.Designer.cs en un script powershell "$Home\Mes documents\Visual Studio 2008\Projects\MyForms\MyForms\Form1.ps1".

Le script ne contient pas le code chargement des assemblies, celui-ci se trouve dans le script d'un formulaire principal.
Le script généré concerne donc un formulaire secondaire.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 5</Name>
          <Cmd>Convert-Form Form1.Designer.cs -HideConsole </Cmd>
          <Description>Converti la form en lui ajoutant le code masquant la fenêtre de la console Powershell durant le temps d'exécution de la fenêtre.

Le script généré concerne un formulaire principal.</Description>
          <Output />
        </Example>
      </Examples>
      <RelatedLinks />
      <SupportInformation ad="false" rsat="false" ps2="false" ps3="false" ps4="true" ps5="false" wxp="false" wv="false" w7="false" w8="false" w81="false" w2k3s="false" w2k3e="false" w2k3d="false" w2k8s="false" w2k8e="false" w2k8d="false" w2k8r2s="false" w2k8r2e="false" w2k8r2d="false" w2k12s="false" w2k12d="false" w2k12r2s="false" w2k12r2d="false" />
      <Publish>false</Publish>
    </CmdletObject>
    <CmdletObject verb="Test" noun="PSScript">
      <Name>Test-PSScript</Name>
      <GeneralHelp>
        <Synopsis>Valide la syntaxe d'un fichier powershell.</Synopsis>
        <Description>Valide la syntaxe d'un fichier powershell.
Si le code powershell contient des erreurs de syntaxe, la fonction renvoie une collection d'erreur.

Si un des fichiers à tester n'existe pas, la fonction émet un warning.
</Description>
        <Notes>Source : http://blogs.microsoft.co.il/blogs/scriptfanatic/archive/2009/09/07/parsing-powershell-scripts.aspx</Notes>
        <InputType />
        <InputUrl />
        <InputTypeDescription />
        <ReturnType>System.Management.Automation.PSParseError</ReturnType>
        <ReturnUrl />
        <ReturnTypeDescription>En cas d'erreur renvoie la ou les erreurs de syntaxe, sinon ne renvoie rien</ReturnTypeDescription>
      </GeneralHelp>
      <ParamSets>
        <CommandParameterSetInfo2 Name="__AllParameterSets" Params="FilePath IncludeSummaryReport Verbose Debug ErrorAction WarningAction ErrorVariable WarningVariable OutVariable OutBuffer PipelineVariable" />
      </ParamSets>
      <Syntax>
        <string>Test-PSScript [-FilePath] &lt;String[]&gt; [-IncludeSummaryReport]</string>
      </Syntax>
      <Parameters>
        <ParameterDescription type="String[]" varLen="true" required="true" dynamic="false" pipeRemaining="false" pipe="true" pipeProp="true" isPos="true" pos="0" globbing="false">
          <Name>FilePath</Name>
          <Attributes>
            <string>System.Management.Automation.ArgumentTypeConverterAttribute</string>
            <string>System.Management.Automation.AliasAttribute</string>
            <string>System.Management.Automation.ValidateNotNullOrEmptyAttribute</string>
            <string>System.Management.Automation.ParameterAttribute</string>
          </Attributes>
          <Aliases>
            <string>PSPath</string>
            <string>FullName</string>
          </Aliases>
          <Description>Spécifie le chemin d’accès d'un nom de fichier ou d'un tableau de nom de fichiers. La valeur de chaque entrée du tableau FilePath est utilisée exactement telle que vous la tapez. Aucun caractère n’est interprété en tant que caractère générique. 

Si le chemin d’accès inclut des caractères d’échappement, mettez-le entre des guillemets simples.
Les guillemets simples indiquent à Windows PowerShell qu’aucun caractère ne doit être interprété en tant que séquence d’échappement.
</Description>
          <DefaultValue />
        </ParameterDescription>
        <ParameterDescription type="SwitchParameter" varLen="false" required="false" dynamic="false" pipeRemaining="false" pipe="false" pipeProp="false" isPos="false" pos="named" globbing="false">
          <Name>IncludeSummaryReport</Name>
          <Attributes>
            <string>System.Management.Automation.ParameterAttribute</string>
            <string>System.Management.Automation.ArgumentTypeConverterAttribute</string>
          </Attributes>
          <Aliases />
          <Description>Affiche un résultat sommaire des fichiers testés via un appel à Write-Verbose.
</Description>
          <DefaultValue />
        </ParameterDescription>
      </Parameters>
      <Examples>
        <Example>
          <Name>Example 1</Name>
          <Cmd>$SyntaxErrors=@(Test-PSScript -Filepath $FilePSPS1)

if ($SyntaxErrors.Count -gt 0)
{ Write-Error "Syntax error" }
     </Cmd>
          <Description>Si le fichier $FilePSPS1 contient au moins une erreurs de syntaxe, l'appelant génèrera une erreur.</Description>
          <Output />
        </Example>
        <Example>
          <Name>Example 2</Name>
          <Cmd>$SyntaxErrors=@(Test-PSScript -Filepath $FilePSPS1 -IncludeSummaryReport)

if ($SyntaxErrors.Count -gt 0)
{ Write-Error "Syntax error" }
</Cmd>
          <Description>Si le fichier $FilePSPS1 contient au moins une erreurs de syntaxe, l'appelant génèrera une erreur. 
Le commentaire suivant sera également affiché sur la console :
COMMENTAIRES : 1 script(s) processed, 1 script(s) contain syntax errors,  0 file(s) unknown.

Sinon ce sera celui-ci:
COMMENTAIRES : 1 script(s) processed, 0 script(s) contain syntax errors,  0 file(s) unknown.</Description>
          <Output />
        </Example>
      </Examples>
      <RelatedLinks />
      <SupportInformation ad="false" rsat="false" ps2="false" ps3="false" ps4="false" ps5="false" wxp="false" wv="false" w7="false" w8="false" w81="false" w2k3s="false" w2k3e="false" w2k3d="false" w2k8s="false" w2k8e="false" w2k8d="false" w2k8r2s="false" w2k8r2e="false" w2k8r2d="false" w2k12s="false" w2k12d="false" w2k12r2s="false" w2k12r2d="false" />
      <Publish>false</Publish>
    </CmdletObject>
  </Cmdlets>
</ModuleObject>